
@{
    ViewBag.Title = "GoToCalendar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 style="text-align:center">Google Calendar</h2>

<head>
    <meta charset='utf-8' />
</head>

<body>
    <h3 style="text-align:center">--Quickstart--</h3>
    <h4 style="text-align:center">Sign in to link your Google calendar</h4>

    <button id="authorize-button" style="display: none; ">Authorize</button>
    <button id="signout-button" style="display: none; ">Sign Out</button>
    <pre id="content" style="width: 500px; height:150px; "></pre>

    <h4>Type into fields below to add an event to your calendar.</h4>

    <form type="text" method="post" name="message">
        Event Title <br/><input type="text" style="width: 300px; height: 25px;" id="eventTitle" required><br />
        Start Date: YYYY-MM-DDTHH:MM:SS-HH:MM <br /><input type="text" style="width: 300px; height: 25px;" id="startDate" required><br />
        End Date: YYYY-MM-DDTHH:MM:SS-HH:MM <br /><input type="text" style="width: 300px; height: 25px;" id="endDate" required><br />
        Event Location <br /><input type="text" style="width: 300px; height: 25px;" id="eventLocation"><br />
        Event Description <br /><input type="text" style="width: 300px; height: 25px;" id="eventDesc"><br />
        <input type="button" value="Submit"onclick="addEvent();" >
    </form>

    <script async defer src="https://apis.google.com/js/api.js"
            onload="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <script type="text/javascript">       
        var CLIENT_ID = '358978147634-vt5o7c3na9s28m3qj3jvfp8a39mp5pdm.apps.googleusercontent.com';
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
        var calendarPost = ["https://www.googleapis.com/calendar/v3/calendars/calendarId/events"];
        var SCOPES = "https://www.googleapis.com/auth/calendar";
        var authorizeButton = document.getElementById('authorize-button');
        var signoutButton = document.getElementById('signout-button');     

        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }
     
        function initClient() {
            gapi.client.init({
                discoveryDocs: DISCOVERY_DOCS,
                clientId: CLIENT_ID,
                scope: SCOPES
            }).then(function () {
                gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
            });
        }

        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signoutButton.style.display = 'block';
                listUpcomingEvents();
            } else {
                authorizeButton.style.display = 'block';
                signoutButton.style.display = 'none';
            }
        }

        function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
        }

        function handleSignoutClick(event) {
            gapi.auth2.getAuthInstance().signOut();
        }

        function appendPre(message) {
            var pre = document.getElementById('content');
            var textContent = document.createTextNode(message + '\n');
            pre.appendChild(textContent);
        }

        function listUpcomingEvents() {
            gapi.client.calendar.events.list({
                'calendarId': 'primary',
                'timeMin': (new Date()).toISOString(),
                'showDeleted': false,
                'singleEvents': true,
                'maxResults': 10,
                'orderBy': 'startTime'
            }).then(function (response) {
                var events = response.result.items;
                appendPre('Upcoming events:');

                if (events.length > 0) {
                    for (i = 0; i < events.length; i++) {
                        var event = events[i];
                        var when = event.start.dateTime;
                        if (!when) {
                            when = event.start.date;
                        }
                        appendPre(event.summary + ' (' + when + ')')
                    }
                } else {
                    appendPre('No upcoming events found.');                                     
                }
            });
        }
         
        
       

        function addEvent() {
            var eventTitle = document.getElementById("eventTitle").value;
            var startDate = document.getElementById("startDate").value;
            var endDate = document.getElementById("endDate").value;
            var description = document.getElementById("eventDesc").value;
            var location = document.getElementById("eventLocation").value;
            var testEvent = {
                'summary': 'Google I/O 2015',
                'location': '800 Howard St., San Francisco, CA 94103',
                'description': 'A chance to hear more about Google\'s developer products.',
                'start': {
                    'dateTime': '2017-07-28T09:00:00-07:00',
                    'timeZone': 'America/Los_Angeles'
                },
                'end': {
                    'dateTime': '2017-07-28T17:00:00-07:00',
                    'timeZone': 'America/Los_Angeles'
                },
                'recurrence': [
                 
                ],
                'attendees': [
                  
                ],
                'reminders': {
                    'useDefault': false,
                    'overrides': [
                      { 'method': 'email', 'minutes': 24 * 60 },
                      { 'method': 'popup', 'minutes': 10 }
                    ]
                }
            };
            var request = gapi.client.calendar.events.insert({
                'calendarId': 'primary',
                'resource': testEvent
            });

            request.execute(function (testEvent) {
                appendPre('Event created: ' + testEvent.htmlLink);
            });
        }
    </script>

    
</body>
